AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy React Frontend on EC2 using Docker from ECR with ALB and Route53

Parameters:
  FrontendImage:
    Type: String
    Description: ECR Image URI for frontend
  ECRRegistry:
    Type: String
    Description: Registry
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Default VPC ID
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet for EC2 instance
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  FrontendImageURI:
    Type: String
    Description: Full ECR Image URI with tag
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID
  DomainName:
    Type: String
    Description: Domain name (e.g., prepiq.online)

Resources:
  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow HTTP to frontend EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  FrontendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref FrontendSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > /var/log/user-data.log 2>&1

          sudo yum update -y
          sudo amazon-linux-extras install docker -y
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user

          until docker info >/dev/null 2>&1; do
            sleep 2
          done

          for i in {1..5}; do
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${ECRRegistry} && break
            sleep 5
          done

          docker pull ${FrontendImageURI}
          docker run -d -p 80:80 ${FrontendImageURI}

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: frontend-alb
      Subnets: [!Ref SubnetId]
      SecurityGroups: [!Ref FrontendSecurityGroup]
      Scheme: internet-facing

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

Outputs:
  FrontendPublicIP:
    Description: Public IP of the frontend EC2 instance
    Value: !GetAtt FrontendInstance.PublicIp

  LoadBalancerDNS:
    Description: Public DNS of the Application Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
