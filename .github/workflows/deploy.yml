name: Deploy to AWS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  BACKEND_IMAGE: majorproject/backend-prepiq
  FRONTEND_IMAGE: majorproject/frontend-prepiq
  ECR_REGISTRY: 454919090770.dkr.ecr.us-east-2.amazonaws.com
  STACK_NAME: edurag-ecs-stack
  FRONTEND_STACK: edurag-frontend-stack

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and Push Backend
        run: |
          docker build -t $ECR_REGISTRY/$BACKEND_IMAGE:latest ./Backend
          docker push $ECR_REGISTRY/$BACKEND_IMAGE:latest

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file infra-provision/infra.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              BackendImage=$ECR_REGISTRY/$BACKEND_IMAGE:latest \
              VpcId=${{ secrets.DEFAULT_VPC_ID }} \
              SubnetIds=${{ secrets.DEFAULT_SUBNET_IDS }} \
              GroqApiKey=${{ secrets.GROQ_API_KEY }}


      - name: Get ALB URL
        id: alb
        run: |
          ALB_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
            --output text)
          echo "ALB_URL=$ALB_URL" >> $GITHUB_ENV

      - name: Build and Push Frontend
        run: |
          docker build \
            --build-arg REACT_APP_API_URL=http://$ALB_URL \
            -t $ECR_REGISTRY/$FRONTEND_IMAGE:latest ./Frontend/quiz_application
          docker push $ECR_REGISTRY/$FRONTEND_IMAGE:latest

      - name: Get Latest Amazon Linux 2 AMI ID
        id: ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners amazon \
            --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=state,Values=available" \
            --query 'Images[*].[ImageId,CreationDate]' \
            --output text | sort -k2 -r | head -n1 | cut -f1)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Deploy Frontend CloudFormation Stack
        run: |
          FIRST_SUBNET=$(echo "${{ secrets.DEFAULT_SUBNET_IDS }}" | cut -d',' -f1)
          aws cloudformation deploy \
            --stack-name $FRONTEND_STACK \
            --template-file infra-provision/infra-ui.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              AmiId=$AMI_ID \
              ECRRegistry=$ECR_REGISTRY \
              FrontendImageURI=$ECR_REGISTRY/$FRONTEND_IMAGE:latest \
              FrontendImage=$FRONTEND_IMAGE \
              VpcId=${{ secrets.DEFAULT_VPC_ID }} \
              SubnetIds=${{ secrets.DEFAULT_SUBNET_IDS }} \
              SubnetId=$FIRST_SUBNET \
              DomainName=prepiq.online \
              HostedZoneId=${{ secrets.HOSTED_ZONE_ID }}

